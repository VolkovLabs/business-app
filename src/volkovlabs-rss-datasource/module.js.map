{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///../node_modules/fast-xml-parser/src/util.js","webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///../node_modules/fast-xml-parser/src/fxp.js","webpack:///../node_modules/fast-xml-parser/src/validator.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack:///../node_modules/strnum/strnum.js","webpack:///../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack:///../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack:///external amd \"lodash\"","webpack:///../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack:///external amd \"rxjs\"","webpack:///external amd \"@grafana/runtime\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./components/ConfigEditor/ConfigEditor.tsx","webpack:///./constants/datasource.ts","webpack:///./constants/items.ts","webpack:///./constants/query.ts","webpack:///./components/QueryEditor/QueryEditor.tsx","webpack:///./utils.ts","webpack:///./api/api.ts","webpack:///./datasource/datasource.ts","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"amp\" : { regex: /&(amp|#38|#x26);/g, val : \"&\"},\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n       \n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName) {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: []\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React, { ChangeEvent, PureComponent } from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { DataSourceOptions } from '../../types';\n\n/**\n * Editor Properties\n */\ninterface Props extends DataSourcePluginOptionsEditorProps<DataSourceOptions> {}\n\n/**\n * State\n */\ninterface State {}\n\n/**\n * Config Editor\n */\nexport class ConfigEditor extends PureComponent<Props, State> {\n  /**\n   * Feed URL Change\n   */\n  onFeedChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        feed: event.target.value,\n      },\n    });\n  };\n\n  /**\n   * Render\n   */\n  render() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <InlineFieldRow>\n        <InlineField label=\"Feed URL\" labelWidth={14} grow invalid={jsonData.feed === ''}>\n          <Input type=\"text\" value={jsonData.feed} onChange={this.onFeedChange} placeholder=\"https://feed\" />\n        </InlineField>\n      </InlineFieldRow>\n    );\n  }\n}\n","/**\n * Datasource test status\n */\nexport enum DataSourceTestStatus {\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n","/**\n * Meta Properties\n */\nexport enum MetaProperties {\n  OG_IMAGE = 'og:image',\n}\n\n/**\n * Item Keys\n */\nexport enum ItemKey {\n  AUTHOR = 'author',\n  CONTENT = 'content',\n  CONTENT_ENCODED = 'content:encoded',\n  CONTENT_H4 = 'content:h4',\n  CONTENT_IMG = 'content:img',\n  CONTENT_IMG_SRC = 'content:img-src',\n  GUID = 'guid',\n  LINK = 'link',\n  META = 'meta',\n  PUB_DATE = 'pubDate',\n  SUMMARY = 'summary',\n  MEDIA_GROUP = 'media:group',\n  MEDIA_THUMBNAIL = 'media:thumbnail',\n  MEDIA_CONTENT = 'media:content',\n  MEDIA_DESCRIPTION = 'media:description',\n}\n\n/**\n * Parse as Array\n */\nexport const alwaysArray = ['feed.entry', 'rdf:RDF.item', 'rss.channel.item'];\n","import { SelectableValue } from '@grafana/data';\nimport { Query } from '../types';\n\n/**\n * Query Type Values\n */\nexport enum FeedTypeValue {\n  CHANNEL = 'channel',\n  ITEMS = 'items',\n  ALL = 'all',\n}\n\n/**\n * Defaults for Query\n */\nexport const defaultQuery: Partial<Query> = {\n  feedType: FeedTypeValue.ALL,\n};\n\n/**\n * Query Type\n *\n * @type {SelectableValue[]}\n */\nexport const FeedType: SelectableValue[] = [\n  {\n    label: 'Channel & Items',\n    description: 'Returns channel data and items',\n    value: FeedTypeValue.ALL,\n  },\n  {\n    label: 'Channel',\n    description: 'Returns channel data only',\n    value: FeedTypeValue.CHANNEL,\n  },\n  {\n    label: 'Items',\n    description: 'Returns items only',\n    value: FeedTypeValue.ITEMS,\n  },\n];\n","import { defaults } from 'lodash';\nimport React, { ChangeEvent, PureComponent } from 'react';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { defaultQuery, FeedType, FeedTypeValue } from '../../constants';\nimport { DataSource } from '../../datasource';\nimport { DataSourceOptions, Query } from '../../types';\n\n/**\n * Editor Properties\n */\ntype Props = QueryEditorProps<DataSource, Query, DataSourceOptions>;\n\n/**\n * Query Editor\n */\nexport class QueryEditor extends PureComponent<Props> {\n  /**\n   * Feed Type change\n   */\n  onFeedTypeChange = async (item: SelectableValue<FeedTypeValue>) => {\n    const { onChange, onRunQuery, query } = this.props;\n    onChange({ ...query, feedType: item.value! });\n    onRunQuery();\n  };\n\n  /**\n   * Date Field change\n   */\n  onDateFieldChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, onRunQuery, query } = this.props;\n    onChange({ ...query, dateField: event.target.value });\n    onRunQuery();\n  };\n\n  /**\n   * Render\n   */\n  render() {\n    const query = defaults(this.props.query, defaultQuery);\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Return\" labelWidth={8} grow={true}>\n            <Select\n              options={FeedType}\n              value={FeedType.find((type) => type.value === query.feedType)}\n              onChange={this.onFeedTypeChange}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Filter by Date field\"\n            labelWidth={20}\n            tooltip=\"Specify the date field's name to filter news in the time range. Use Transformation if required.\"\n            grow\n          >\n            <Input type=\"text\" value={query.dateField} onChange={this.onDateFieldChange} placeholder=\"pubDate\" />\n          </InlineField>\n        </InlineFieldRow>\n      </>\n    );\n  }\n}\n","import { TimeRange } from '@grafana/data';\n\n/**\n * Set or added Item values\n */\nexport const setItem = (items: any, key: string, value: string) => {\n  items[key] ? items[key].push(value) : (items[key] = [value]);\n};\n\n/**\n * Check if date inside Time Range\n *\n * @returns {boolean}\n */\nexport const isDateBetweenRange = (value: string, range: TimeRange): boolean => {\n  const pubDate = Date.parse(value) / 1000;\n  if (!pubDate) {\n    return false;\n  }\n\n  /**\n   * Return false if out of range\n   */\n  if (range.from.unix() > pubDate || range.to.unix() < pubDate) {\n    return false;\n  }\n\n  return true;\n};\n","import { XMLParser } from 'fast-xml-parser';\nimport { lastValueFrom } from 'rxjs';\nimport { DataSourceInstanceSettings, FieldType, MutableDataFrame, TimeRange } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { alwaysArray, FeedTypeValue, ItemKey, MetaProperties } from '../constants';\nimport { DataSourceOptions, Query } from '../types';\nimport { isDateBetweenRange, setItem } from '../utils';\n\n/**\n * API\n */\nexport class Api {\n  /**\n   * Constructor\n   */\n  constructor(public instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {}\n\n  /**\n   * Get RSS feed\n   *\n   * @async\n   * @param {Query} query Query\n   * @param {TimeRange} range Time Range\n   * @returns {Promise<MutableDataFrame[]>} Feed\n   */\n  async getFeed(query: Query, range: TimeRange | null = null): Promise<MutableDataFrame[]> {\n    let urlQuery = '';\n\n    /**\n     * Extract parameters\n     */\n    const params = this.instanceSettings.jsonData.feed?.split('?');\n    if (params?.length && params[1]) {\n      urlQuery = `?${params[1]}`;\n    }\n\n    /**\n     * Fetch Feed\n     */\n    const response = await lastValueFrom(\n      getBackendSrv().fetch({\n        method: 'GET',\n        url: `${this.instanceSettings.url}/feed${urlQuery}`,\n      })\n    );\n\n    /**\n     * Nothing returned\n     */\n    if (!response || !response.data) {\n      console.error('RSS data is not found');\n      return [];\n    }\n\n    /**\n     * Parse XML\n     */\n    const parser = new XMLParser({\n      ignoreAttributes: false,\n      isArray: (name, jpath, isLeafNode, isAttribute) => {\n        return alwaysArray.indexOf(jpath) !== -1 ? true : false;\n      },\n    });\n    const data = parser.parse(response.data as any);\n\n    /**\n     * RSS 1.0 (RDF) support\n     */\n    if (data['rdf:RDF'] && !data.rss) {\n      data.rss = data['rdf:RDF'];\n      data.rss.channel.item = data.rss.item;\n    }\n\n    /**\n     * RSS 2.0 with Channel data\n     */\n    if (data.rss && data.rss.channel) {\n      /**\n       * Channel Data\n       */\n      const channel = data.rss.channel;\n      const channelFrame = new MutableDataFrame({\n        name: 'channel',\n        refId: query.refId,\n        fields: [\n          { name: 'title', values: [channel.title], type: FieldType.string },\n          { name: 'description', values: [channel.description], type: FieldType.string },\n          { name: 'generator', values: [channel.generator], type: FieldType.string },\n          { name: 'lastBuildDate', values: [channel.lastBuildDate], type: FieldType.string },\n          { name: 'link', values: [channel.link], type: FieldType.string },\n          { name: 'webMaster', values: [channel.webMaster], type: FieldType.string },\n          { name: 'ttl', values: [channel.ttl], type: FieldType.number },\n          { name: 'imageUrl', values: [channel.image?.url], type: FieldType.string },\n          { name: 'imageTitle', values: [channel.image?.title], type: FieldType.string },\n          { name: 'imageLink', values: [channel.image?.link], type: FieldType.string },\n        ],\n      });\n\n      /**\n       * If items not found, return Channel\n       */\n      if (!channel.item || query.feedType === FeedTypeValue.CHANNEL) {\n        return [channelFrame];\n      }\n\n      /**\n       * Find all items\n       */\n      const items: { [id: string]: string[] } = {};\n      channel.item.forEach((item: any) => {\n        /**\n         * Filter by specified Date field\n         */\n        if (query.dateField && range && !isDateBetweenRange(item[query.dateField], range)) {\n          return;\n        }\n\n        Object.keys(item).forEach((key: string) => {\n          let value = item[key];\n\n          /**\n           * Parse Meta\n           */\n          if (key === ItemKey.META && value['@_property'] === MetaProperties.OG_IMAGE) {\n            key = MetaProperties.OG_IMAGE;\n            value = value['@_content'];\n          }\n\n          /**\n           * Parse Guid\n           */\n          if (key === ItemKey.GUID && value['#text']) {\n            value = value['#text'];\n          }\n\n          /**\n           * Parse Encoded content for H4 and first Image\n           */\n          if (key === ItemKey.CONTENT_ENCODED) {\n            const h4 = value.match(/<h4>(.*?)<\\/h4>/);\n            const figure = value.match(/<figure>(.*?)<\\/figure>/);\n\n            setItem(items, ItemKey.CONTENT_H4, h4?.length ? h4[1] : '');\n\n            /**\n             * Extract image and source\n             */\n            if (figure?.length) {\n              setItem(items, ItemKey.CONTENT_IMG, figure[1]);\n              const img = figure[1].match(/<img.+src\\=(?:\\\"|\\')(.+?)(?:\\\"|\\')(?:.+?)\\>/);\n              setItem(items, ItemKey.CONTENT_IMG_SRC, img?.length ? img[1] : '');\n            }\n          }\n\n          setItem(items, key, value);\n        });\n      });\n\n      /**\n       * Create Items frame\n       */\n      const itemsFrame = new MutableDataFrame({\n        name: 'items',\n        refId: query.refId,\n        fields: Object.keys(items).map((key) => {\n          const item = items[key];\n          const type = FieldType.string;\n\n          return { name: key, values: item, type };\n        }),\n      });\n\n      /**\n       * Return Items only\n       */\n      if (query.feedType === FeedTypeValue.ITEMS) {\n        return [itemsFrame];\n      }\n\n      /**\n       * Return Channel & Items\n       */\n      return [channelFrame, itemsFrame];\n    }\n\n    /**\n     * Is it Atom?\n     */\n    if (!data.feed) {\n      return [];\n    }\n\n    /**\n     * Channel Data\n     */\n    const feed = data.feed;\n    const channelFrame = new MutableDataFrame({\n      name: 'channel',\n      refId: query.refId,\n      fields: [\n        { name: 'author', values: [feed.author?.name], type: FieldType.string },\n        { name: 'id', values: [feed.id], type: FieldType.string },\n        { name: 'title', values: [feed.title], type: FieldType.string },\n        { name: 'updated', values: [feed.updated], type: FieldType.string },\n      ],\n    });\n\n    /**\n     * If enties not found, return Channel\n     */\n    if (!feed.entry || query.feedType === FeedTypeValue.CHANNEL) {\n      return [channelFrame];\n    }\n\n    /**\n     * Find all entries\n     */\n    const entries: { [id: string]: string[] } = {};\n    feed.entry.forEach((entry: any) => {\n      /**\n       * Filter by specified Date field\n       */\n      if (query.dateField && range && !isDateBetweenRange(entry[query.dateField], range)) {\n        return;\n      }\n\n      Object.keys(entry).forEach((key: string) => {\n        let value = entry[key];\n\n        /**\n         * Link\n         */\n        if (key === ItemKey.LINK && value['@_href']) {\n          value = value['@_href'];\n        }\n\n        /**\n         * Content\n         */\n        if (key === ItemKey.CONTENT && value['#text']) {\n          value = value['#text'];\n        }\n\n        /**\n         * Summary\n         */\n        if (key === ItemKey.SUMMARY && value['#text']) {\n          value = value['#text'];\n        }\n\n        /**\n         * Author\n         */\n        if (key === ItemKey.AUTHOR && value['name']) {\n          value = value['name'];\n        }\n\n        /**\n         * Thumbnail\n         */\n        if (key === ItemKey.MEDIA_THUMBNAIL && value['@_url']) {\n          value = value['@_url'];\n        }\n\n        /**\n         * Media Group\n         */\n        if (key === ItemKey.MEDIA_GROUP) {\n          /**\n           * Thumbnail URL\n           */\n          if (value[ItemKey.MEDIA_THUMBNAIL] && value[ItemKey.MEDIA_THUMBNAIL]['@_url']) {\n            setItem(\n              entries,\n              `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_THUMBNAIL}:url`,\n              value[ItemKey.MEDIA_THUMBNAIL]['@_url']\n            );\n          }\n\n          /**\n           * Content URL\n           */\n          if (value[ItemKey.MEDIA_CONTENT] && value[ItemKey.MEDIA_CONTENT]['@_url']) {\n            setItem(\n              entries,\n              `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_CONTENT}:url`,\n              value[ItemKey.MEDIA_CONTENT]['@_url']\n            );\n          }\n\n          /**\n           * Description\n           */\n          if (value[ItemKey.MEDIA_DESCRIPTION]) {\n            setItem(entries, `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_DESCRIPTION}`, value[ItemKey.MEDIA_DESCRIPTION]);\n          }\n        }\n\n        setItem(entries, key, value);\n      });\n    });\n\n    /**\n     * Create Items frame\n     */\n    const itemsFrame = new MutableDataFrame({\n      name: 'items',\n      refId: query.refId,\n      fields: Object.keys(entries).map((key) => {\n        const item = entries[key];\n        return { name: key, values: item, type: FieldType.string };\n      }),\n    });\n\n    /**\n     * Return Items only\n     */\n    if (query.feedType === FeedTypeValue.ITEMS) {\n      return [itemsFrame];\n    }\n\n    /**\n     * Return Channel & Items\n     */\n    return [channelFrame, itemsFrame];\n  }\n}\n","import {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { Api } from '../api';\nimport { DataSourceTestStatus, FeedTypeValue } from '../constants';\nimport { DataSourceOptions, Query } from '../types';\n\n/**\n * Datasource\n */\nexport class DataSource extends DataSourceApi<Query, DataSourceOptions> {\n  /**\n   * Api\n   *\n   * @type {Api} api\n   */\n  api: Api;\n\n  /**\n   * Constructor\n   */\n  constructor(instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {\n    super(instanceSettings);\n    this.api = new Api(instanceSettings);\n  }\n\n  /**\n   * Query\n   */\n  async query(options: DataQueryRequest<Query>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const data: DataFrame[] = [];\n\n    /**\n     * Process targets\n     */\n    await Promise.all(\n      options.targets.map(async (target) => {\n        const frames = await this.api.getFeed(target, range);\n        if (frames && frames.length) {\n          data.push(...frames);\n        }\n      })\n    );\n\n    /**\n     * Return data\n     */\n    return { data };\n  }\n\n  /**\n   * Health Check\n   */\n  async testDatasource() {\n    /**\n     * Get RSS Feed\n     */\n    const frames = await this.api.getFeed({\n      refId: 'A',\n      feedType: FeedTypeValue.ALL,\n    });\n\n    const isStatusOk = frames.length ? true : false;\n\n    /**\n     * Return\n     */\n    return {\n      status: isStatusOk ? DataSourceTestStatus.SUCCESS : DataSourceTestStatus.ERROR,\n      message: isStatusOk ? `Connected...` : \"Error. Can't connect.\",\n    };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor, QueryEditor } from './components';\nimport { DataSource } from './datasource';\nimport { DataSourceOptions, Query } from './types';\n\n/**\n * Datasource Plugin\n */\nexport const plugin = new DataSourcePlugin<DataSource, Query, DataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","validator","XMLParser","XMLBuilder","XMLValidator","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildOptions","OrderedObjParser","prettify","constructor","this","externalEntities","parse","validationOption","toString","Error","orderedObjParser","addExternalEntities","orderedResult","parseXml","preserveOrder","addEntity","key","xmlNode","readDocType","toNumber","entKeys","ent","lastEntities","val","parseTextData","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","trimValues","replaceEntitiesValue","newval","tagValueProcessor","parseValue","parseTagValue","numberParseOptions","resolveNameSpace","removeNSPrefix","prefix","charAt","attrsRegx","buildAttributesMap","ignoreAttributes","attrs","oldVal","aName","attributeNamePrefix","newVal","attributeValueProcessor","parseAttributeValue","attributesGroupName","attrCollection","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastIndexOf","tagsNodeStack","tagData","readTagExp","ignoreDeclaration","ignorePiTags","childNode","add","textNodeName","tagExp","attrExpPresent","addChild","endIndex","commentPropName","comment","docTypeEntities","entities","cdataPropName","lastTag","isItStopNode","stopNodes","tagContent","readStopNodeData","child","processEntities","entityName","entity","regx","htmlEntities","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","search","openTagCount","shouldParse","node","entityRegex","parseEntityExp","exp","hasBody","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","buildFromOrderedJs","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","buildAttrPairStr","object","level","j2x","tagEndExp","piClosingChar","textValue","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","Date","attr","arrLen","j","item","Ks","L","arrToStr","arr","xmlStr","indentation","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","tagStart","tagValue","attrMap","attrVal","jArray","__WEBPACK_EXTERNAL_MODULE__14__","alwaysCreateTextNode","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","__WEBPACK_EXTERNAL_MODULE__17__","__WEBPACK_EXTERNAL_MODULE__18__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","prop","call","r","Symbol","toStringTag","DataSourceTestStatus","MetaProperties","ItemKey","ConfigEditor","event","props","onOptionsChange","jsonData","feed","InlineFieldRow","InlineField","label","labelWidth","grow","invalid","Input","type","onChange","onFeedChange","placeholder","PureComponent","FeedTypeValue","alwaysArray","defaultQuery","feedType","ALL","FeedType","description","CHANNEL","ITEMS","QueryEditor","onRunQuery","query","dateField","defaults","Select","find","onFeedTypeChange","tooltip","onDateFieldChange","setItem","items","isDateBetweenRange","range","pubDate","from","unix","to","Api","instanceSettings","urlQuery","params","lastValueFrom","getBackendSrv","fetch","method","url","response","parser","rss","channel","channelFrame","MutableDataFrame","refId","fields","values","title","FieldType","generator","lastBuildDate","link","webMaster","ttl","image","forEach","META","OG_IMAGE","GUID","CONTENT_ENCODED","h4","figure","CONTENT_H4","CONTENT_IMG","img","CONTENT_IMG_SRC","itemsFrame","author","id","updated","entry","entries","LINK","CONTENT","SUMMARY","AUTHOR","MEDIA_THUMBNAIL","MEDIA_GROUP","MEDIA_CONTENT","MEDIA_DESCRIPTION","DataSource","api","Promise","all","targets","getFeed","frames","isStatusOk","status","SUCCESS","ERROR","DataSourceApi","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}